## Refactor
- flesh out ray test method
- update parts of code for C++11
- make basic math classes immutable
- add operator overloads for basic math classes
- add framework (base class) for demos
- rework exception throw macros for C++11
- change resources to build themselves from steams, not file paths
- change builders to use cascade pattern and build objects themselves
- generally try to remove mutation of objects, especially required mutation for basic creation
- get rid of c strings and c methods for strings and files
- change mesh interface to be easier
- change mesh storage to not replicate vertices if possible
- introduce a unified shape api (For mesh, collision hull, etc).
- add logic to auto-calculate normals
- add logic to auto-calculate tangents
- add shadow mapping to full shader
- add normal mapping to full shader

## Rendering Performance
- add configurable frustrum culling
	- can use bullet collision to build bounding spheres for meshes and test collisions
- add configurable object distance sorting
	- opaque objects rendered from front to back; to take advantage of depth buffer
	- transparent objects rendered from back to front; to maintain transparency, depth buffer off

## fix
- fix resource exists method to actually check if file exists
- fix tangent calculation, seems to have some issues; look at the twisting specular highlight when normal mapping

## Primary
- integrate lua script support 
    - add lua inline console support to demo framework
- integrate crosshairs into demo framework
- add free picking support
- add support for physics explosions and other force generating events
- add support for custom named vertex attributes
- add more advanced lights interface to World
- move wireframe mode to Graphics System
- add single color mode to world
- standardize modelresource
    - add ability to create a model from a model resource, meshes and optional materials
- start optimizing graphics pipeline
    - caching resources do they don't need to rebuild and/or rebound between meshes or frames
- add special handling for transparent meshes to piepline
- add support for multiple passes to materials
- add support for multiple 'techniques' to materials
- need to decide what resources can't be modified without notifying the object and/or world
    - meshes and materials can be modified outside, but may cause issues with optimiziations
      in graphics pipeline
    - changes in physical properties or collision shape require rebuilding a rigid body, thus
      needs to notify body and world
    - may be able to easily solve by using some publisher/listener patterns
        - so cached resources can be rebuilt when a change occurs
- add hashing algorithms
    - one super-fast collision-happy one
    - one decently fast and collision-resistant one
- add more physics collision shapes
- add physics options parameter passed on object creation
- add Image class
    - system memory equal of texture
    - all image custom modification happens in Images and not textures
    - basic drawing of 2D shapes
    - drawing text to image
- add the ability to modify and resize an existing batch
- add ability to get and set partial batches
- add scale matrix option to render somehow
    - also add scale matrix option to physics shapes
- expand 3DS model resource to load texture coordinates and provide linked texture names
- add sorting to pipeline
    - opaque are sorted from front to back
    - transparent are sorted from back to front
- add viewing culling to pipeline
    - need algorithm to calculate bounding box/sphere
    - need collision algorithm between frustrum and bounding box/sphere
- modify image resources to allow for multiple image retievals
    - need to reset some variables at end of read
- add shortcuts from resources to video memory for meshes and textures
    - simplier interface for when manipulating that data on system memory is not needed
- add support for google sketup models
- remove builder architecture from materials?

## Secondary
- add truetype and text rendering support
    - ability to render text onto a bitmap
    - ability to make a text bitmap, with standard chars on it
        - for shader-directed text rendering, add shader for it
- start adding examples
    - examples show one to a few key concepts, unlike demos
- add support for 
	- cube maps
	- point sprites
    - bump map auto-bound uniform
- Add simple keyframe animation support
- Add attachment objects and dependencies between objects
    - attachments can be used for decals
- Go through math implementation and add MAGIC_THROW and MAGIC_ASSERT where neccessary
- ensure all openGL calls and types are in clases in Graphics folder, so a replacementable
  implementation system can be made for the graphics
- ensure all bullet calls and types are in classes in Physics folder, so a replacementable
  implementation system can be made for the graphics
- add more hooks into pipeline
- add fustrum culling to graphical pipeline
- add object sorting to graphical pipeline
    - opaque objects should be renderered front to back
    - transparent objects should be rendered back to front
    - objects using the same material should be grouped together
        - want to avoid switching resources constantly
- add factories and pools for parts to keep memory contigous
-add model-texture mapping interface to be used through object class
-add option to render everything in wireframe
-add MMX assembly solutions for matrix and vector ops
-add functionally for messing with blending
	-also enable some default blending so at least transparency works
-add 2d varonoi diagram algorithm
	-add API support for splitting a object using a varonoi diagram
	-this will be used to create simple shattering effects
-add more basic models
-add wiki for documentation and api/architecture/design decussions
-add windows and Mac support
	-add visual studio support
	-add Xcode support
-look into Bullet soft body support
	-cloth, rope and the like
-add in sound support with openAL
	-including new sound resources and loaders
	-support at least OGG format
	-may want other formats if we want to offer something akin to a music player
-add support for scripting language
-run some profilling just to make sure nothing stands out
	-gprof is probably good enough
-add support for saving screenshots
	-TGA and PNG resources should have writing mechanisms, not just reading
-add support for generating hilly terrain with heightmaps for physics in Bullet
-fill out camera support
	-at least an FPS, flying, and fixed camera
-add support for particle effects
-add algorithm to stitch together multiple intersecting meshes into one mesh
    - most common use is to generate a physical mesh from a complicated graphical model
    - vertices not "visible" should be removed
    - return error if not all meshes are intersecting
-add algorithm to remove non-visible vertices from a mesh
    - assumes all meshes are opaque

## Demo ideas
- A box that spawns tiny blue balls to simulate water and a bowl for the particles to fall into

## Examples ideas
- most basic starting demo with a ground and a single object
- using camera and framebuffer objects to render a scene from multiple angles
- using a multi-pass renderer, make a motion blur demo





