## Primary
- integrate SDL support
    - demo uses it directly right now
- add truetype and text rendering support
    - ability to render text onto a bitmap
    - ability to make a text bitmap, with standard chars on it
        - for shader-directed text rendering, add shader for it
- add shader helper classes for existing shaders
- start adding examples
    - examples show one to a few key concepts, unlike demos
- add support for 
	- cube maps
	- point sprites
	- multiple textures
- add bitmap class
    - bitmaps would represent image data in system memory
    - textures would represent image data in graphics memory
    - have image resources output bitmaps
-add support for png files

## Secondary
-add model-texture mapping interface to be used through object class
-add option to render everything in wireframe
-add MMX assembly solutions for matrix and vector ops
-add functionally for messing with blending
	-also enable some default blending so at least transparency works
-add rendering pipeline
	-need to ensure fully opaque stuff is rendered first, then partially opaque back to front
-add 2d varonoi diagram algorithm
	-add API support for splitting a object using a varonoi diagram
	-this will be used to create simple shattering effects
-add more basic models
-add wiki for documentation and api/architecture/design decussions
-add windows and Mac support
	-add visual studio support
	-add Xcode support
-create sandbox class/classes
	-for testing, demo, and protyping purposes
	-flat plane environment with selectable camera
	-can place standard models
	-can load models and textures from filesystem and arrange models
	-test out physics
	-meant to ease learning curve
		-people who don't even know programming can start by using this to get concepts down
		-and then ease into programming
		-just look at how many good looking, but barely functioning games are made in blender's "game engine"
-add multi-threaded support
	-add small options to make some tasks multi-threaded
	-also make it so some things are "thread-safe" so that the app code can run multi-threaded
		-need to outline these in documentation very specifically
	-mabye look into openMP (http://openmp.org/wp/about-openmp/)
	-mabye look into CUDA/openCL for GPU accelerated tasks
		-bullet doesn't currently use GPU acceleration
-add block wall basic shape
	- a rectangular shape made up of smaller blocks to allow for simplified destruction
-start to add system-level functionallity to API
	-init physics and graphics engine
	-manage collections of objects?
-look into Bullet soft body support
	-cloth, rope and the like
-add mechanism for good frame-rate control
-add in sound support with openAL
	-including new sound resources and loaders
	-support at least OGG format
	-may want other formats if we want to offer something akin to a music player
-add more control over physics chararistics to objects
	-more Bullet interfacing in Object class
-add support for scripting language
	-is necessity considering all the prototyping that is needed to get scenes correct
	-dynamic, in that a change to the scripts can be seen in-engine without reloading
	-sadly, Lua is the best bet; I may have to learn the damn thing
	-try to keep the scripting langauge and C++ interfaces as seperated as possible for simplicity and consistency
-run me some valgrind!!
-run some profilling just to make sure nothing stands out
	-gprof is probably good enough
-make a damn teacup and monkey head model
-add support for input devices including controllers
	-probably just through SDL
-add support for skyboxes
-add support for overlays and writing text to overlays
-add support for saving screenshots
	-TGA and PNG resources should have writing mechanisms, not just reading
-add support for generating hilly terrain with heightmaps for physics in Bullet
-after adding support for model, add support for animations
	-nice to be able to load these animations from model files
-fill out camera support
	-at least an FPS, flying, and fixed camera
-add support for particle effects
	-I don't think Bullet can do it
	-fog, exposions, water?








